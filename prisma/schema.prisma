generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String     @unique
  email     String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  checkIns  CheckIn[]
  createdLocations Location[] // New relation to track created temporary locations
  helpRequestsAsRequester HelpRequest[] @relation("HelpRequestRequester") // Als Anfrager
  helpRequestsAsTarget HelpRequest[] @relation("HelpRequestTarget") // Als Ziel-Person

  @@map("users")
}

model Location {
  id          String     @id @default(cuid())
  name        String
  description String
  icon        String     // Icon name from lucide-react
  color       String     // Tailwind color class
  isActive    Boolean    @default(true)
  isTemporary Boolean    @default(false) // New field for temporary locations
  createdBy   String?    // New field to track who created the temporary location
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  checkIns    CheckIn[]
  helpRequests HelpRequest[] // New relation to track help requests

  // Add relation to User for temporary locations
  creator     User?      @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("locations")
}

model CheckIn {
  id         String    @id @default(cuid())
  userId     String
  locationId String
  checkedInAt DateTime @default(now())
  checkedOutAt DateTime?
  isActive   Boolean   @default(true)
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("checkins")
  @@index([userId])
  @@index([locationId])
  @@index([isActive])
}

model HelpRequest {
  id          String   @id @default(cuid())
  requesterId String
  locationId  String
  targetUserId String? // Optionale spezifische Person zur Hilfe
  message     String?
  status      HelpRequestStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  requester   User     @relation("HelpRequestRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  targetUser  User?    @relation("HelpRequestTarget", fields: [targetUserId], references: [id], onDelete: SetNull)
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("help_requests")
  @@index([requesterId])
  @@index([locationId])
  @@index([targetUserId])
  @@index([status])
  @@index([createdAt])
}

enum HelpRequestStatus {
  ACTIVE
  RESOLVED
  CANCELLED
} 